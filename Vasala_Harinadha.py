# -*- coding: utf-8 -*-
"""Youtube_NL2SQL_llama_Index.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1T8j9A82JjfOTDnDLE1FNTUtmjWTUfYP7

<a href="https://colab.research.google.com/github/PradipNichite/Youtube-Tutorials/blob/main/Youtube_NL2SQL_llama_Index.ipynb" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/></a>

###Realted Videos
"""

!pip install llama-index pymysql -q

import logging
import sys

logging.basicConfig(stream=sys.stdout, level=logging.INFO, force=True)
logging.getLogger().addHandler(logging.StreamHandler(stream=sys.stdout))
from IPython.display import Markdown, display

db_user = "admin"
db_password = "llama_nl2sql"
db_host = "langchainsql.cl0j8hicdoox.us-east-1.rds.amazonaws.com"
db_name = "classicmodels"

from sqlalchemy import create_engine, text

# Construct the connection string
connection_string = f"mysql+pymysql://{db_user}:{db_password}@{db_host}/{db_name}"

# Create an engine instance
engine = create_engine(connection_string)

# Test the connection using raw SQL
with engine.connect() as connection:
    result = connection.execute(text("select * from customers limit 3"))
    for row in result:
        print(row)

table_details = {
    "customers": "stores customerâ€™s data.",
    "products": "stores a list of scale model cars.",
    "productlines": "stores a list of product line categories.",
    "orders": "stores sales orders placed by customers.",
    "orderdetails": "stores sales order line items for each sales order.",
    "payments": "stores payments made by customers based on their accounts.",
    "employees": "stores all employee information as well as the organization structure such as who reports to whom.",
    "offices": "stores sales office data."
}

from llama_index import SQLDatabase
tables = ["customers","orders"]
# sql_database = SQLDatabase(engine, include_tables=tables,sample_rows_in_table_info=5)
sql_database = SQLDatabase(engine, sample_rows_in_table_info=2)
sql_database

list(sql_database._all_tables)

print(sql_database.table_info)

import os
import openai
os.environ["OPENAI_API_KEY"] = "sk-bE"
openai.api_key = os.environ["OPENAI_API_KEY"]

import tiktoken
from llama_index.callbacks import CallbackManager, TokenCountingHandler
token_counter = TokenCountingHandler(
    tokenizer=tiktoken.encoding_for_model("gpt-3.5-turbo").encode
)

callback_manager = CallbackManager([token_counter])

from llama_index import ServiceContext, LLMPredictor, OpenAIEmbedding, PromptHelper
from llama_index.llms import OpenAI
from llama_index import ServiceContext
llm = OpenAI(temperature=0.1, model="gpt-3.5-turbo")

service_context = ServiceContext.from_defaults(
  llm=llm,callback_manager=callback_manager
)

from llama_index.indices.struct_store.sql_query import NLSQLTableQueryEngine

query_engine = NLSQLTableQueryEngine(
    sql_database=sql_database,
    service_context=service_context
)

# query_str = "Which customer has the highest orders?"
query_str = "when was order number 10100 shiiped?"
# query_str ="What are the most frequently mentioned keywords or phrases in the comments made by sales representatives"
response = query_engine.query(query_str)

print(response.response)

print(response.metadata['sql_query'])

print(response.metadata['result'])

print(token_counter.total_llm_token_count)

token_counter.reset_counts()

from llama_index.objects import ObjectIndex
from llama_index.objects import SQLTableNodeMapping, SQLTableSchema
import pandas as pd

tables = list(sql_database._all_tables)
table_node_mapping = SQLTableNodeMapping(sql_database)
table_schema_objs = []
for table in tables:
    table_schema_objs.append((SQLTableSchema(table_name = table, context_str = table_details[table])))

table_schema_objs

from llama_index.indices.struct_store import SQLTableRetrieverQueryEngine
from llama_index import VectorStoreIndex


obj_index = ObjectIndex.from_objects(
    table_schema_objs,
    table_node_mapping,
    VectorStoreIndex,
    service_context=service_context
)

query_engine = SQLTableRetrieverQueryEngine(
    sql_database, obj_index.as_retriever(similarity_top_k=3), service_context=service_context
)
response = query_engine.query("How many customers we have?")

print(response)

print(token_counter.total_llm_token_count)

